{"version":3,"sources":["country.js","heading.js","allCountries.js","App.js","reportWebVitals.js","index.js"],"names":["moment","require","Country","props","getCurrentTimeAtGivenTimezone","timezone","country","format","tz","getCurrentTimeInCountry","setDefault","zonesForCountry","state","countryName","name","nativeName","capital","area","region","currency","currencies","currencySymbol","symbol","borders","map","idx","className","alpha2Code","flag","this","id","src","alt","Component","Heading","AllCountries","countryDetails","fetch","then","res","json","data","setState","d","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fed1214.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './country.css';\nconst moment = require('moment-timezone');\nclass  Country extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            countryName : this.props.name,\n            nativeName: this.props.nativeName,\n            capital : this.props.capital,\n            area : this.props.area,\n            region: this.props.region,\n            currency: this.props.currencies[0].name,\n            currencySymbol: this.props.currencies[0].symbol,\n            borders: this.props.borders.map(\n                (country,idx) => <li className=\"border-value\" key={idx}>{country}</li>\n            ),\n            alpha2Code: this.props.alpha2Code,\n            flag: this.props.flag,\n         }\n    }\n\n    getCurrentTimeAtGivenTimezone = (timezone,country,format) => {\n        return moment.tz(timezone).format(format);\n    }\n\n    getCurrentTimeInCountry = (country) => {\n        const format = 'MMMM Do YYYY, h:mm:ss a';\n        const defaultTimezone = 'Asia/Kolkata';\n        moment.tz.setDefault(defaultTimezone);\n        let timezone = moment.tz.zonesForCountry(country);\n        if(timezone){\n            return this.getCurrentTimeAtGivenTimezone(timezone[0],country,format);\n        }\n    }\n\n    render() { \n        return (\n            <div className=\"country\">\n                <p className=\"field\"><span className=\"label\">Country: </span>{this.state.countryName}({this.state.nativeName})</p>\n                <p className=\"field\"><span className=\"label\">Capital: </span>{this.state.capital}</p>\n                <p className=\"field\"><span className=\"label\">Area: </span>{this.state.area} sq.km</p>\n                <p className=\"field\"><span className=\"label\">Region: </span>{this.state.region}</p>\n                <p className=\"field\"><span className=\"label\">Currency: </span>{this.state.currency} ({this.state.currencySymbol})</p>\n                <div className=\"border-container\">\n                    <p className=\"field\" id=\"border\"><span className=\"label\">Shares borders with: </span>{this.state.borders}</p>\n                </div>\n                <div className=\"flag-container\">\n                    <img className=\"flag-image\" src={this.state.flag} alt={this.state.countryName}></img>\n                </div>\n                <p className=\"field\"><span className=\"label\">Current Time: </span>{this.getCurrentTimeInCountry(this.state.alpha2Code)}</p>\n            </div>\n        );\n    }\n}\n \nexport default Country;","import React, { Component } from 'react';\nimport './heading.css'\n\nclass Heading extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return (  \n            <div>\n                <h1 className=\"heading\">COUNTRIES-GLOSSARY</h1>\n                <p className=\"message\">Scroll down to your favourite country</p>\n            </div>\n        );\n    }\n}\n \nexport default Heading;","import React, { Component } from 'react';\nimport Country from './country';\nimport Heading from './heading';\n\nclass AllCountries extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            countryDetails: []\n         }\n    }\n\n    componentDidMount(){\n        const url = 'https://restcountries.eu/rest/v2/all'\n        fetch(url).then(res => res.json()).then(data => this.setState({countryDetails : data}));\n    }\n\n    render() { \n        return ( \n            <div>\n                <Heading></Heading>\n                {this.state.countryDetails.map((d, idx) => {\n                return (<Country key={idx} name={d.name} nativeName={d.nativeName} \n                    capital={d.capital} area={d.area} region={d.region} flag={d.flag} \n                    currencies={d.currencies} borders={d.borders} alpha2Code={d.alpha2Code}></Country>)\n              })}\n            </div>\n         );\n    }\n}\n \nexport default AllCountries;","import AllCountries from './allCountries';\nimport './App.css';\nimport Country from './country';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AllCountries></AllCountries>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}